meta:
  flow_name: send_and_meter
  version: 1
  owner: messaging
  description: Shared WhatsApp send + metering pipeline that resolves tenant config, calls the WA Cloud API, and logs credit usage per brand.

when:
  all:
    - is_truthy: "{{brand}}"
    - is_truthy: "{{request_id}}"
    - is_truthy: "{{template.name}}"
    - is_truthy: "{{customer_phone}}"

guards:
  idempotency_key: "{{brand}}:{{template.name}}:{{request_id}}"
  cool_off_hours: 1

do:
  - log_trigger: { status: "queued", idempotency_key: "{{guards.idempotency_key}}" }

  - fetch_brand_config:
      sql: |
        select brand, phone_number_id, whatsapp_api_token, default_locale
        from public.brand_config
        where brand = {{brand}}
      expect: one
      assign_to: brand_config

  - set_context: { resolved_locale: "{{locale | default(brand_config.default_locale)}}" }

  - pick_template:
      sql: |
        select template_name, unit_price_rm
        from public.vw_templates_by_price
        where brand = {{brand}}
          and locale = {{resolved_locale}}
        order by unit_price_rm asc, template_name asc
        limit 1
      expect: one
      assign_to: template_row

  - build_payload:
      function: payload_builder
      with:
        brand: "{{brand}}"
        locale: "{{resolved_locale}}"
        request_id: "{{request_id}}"
        template:
          name: "{{template.name | default(template_row.template_name)}}"
          language: "{{template.language | default(resolved_locale.split('_')[0])}}"
        idempotency_key_seed: "{{request_id}}|{{template.name | default(template_row.template_name)}}|{{timestamp_iso}}"
        components: "{{components}}"
      assign_to: wa_payload

  - send_whatsapp:
      http_post:
        url: "https://graph.facebook.com/v17.0/{{brand_config.phone_number_id}}/messages"
        headers:
          Authorization: "Bearer {{brand_config.whatsapp_api_token}}"
          Content-Type: "application/json"
        body:
          messaging_product: "whatsapp"
          to: "{{customer_phone}}"
          type: "template"
          template:
            name: "{{wa_payload.template.name}}"
            language:
              code: "{{wa_payload.template.language}}"
            components: {{wa_payload.components}}
        assign_to: wa_response

  - branch_on_status:
      if: "{{wa_response.status_code >= 200 and wa_response.status_code < 300}}"
      then:
        - db_insert:
            table: public.wa_template_log
            values:
              brand: "{{brand}}"
              idempotency_key: "{{guards.idempotency_key}}"
              status: "sent"
              request_id: "{{request_id}}"
              template_name: "{{wa_payload.template.name}}"
              locale: "{{resolved_locale}}"
              response_code: "{{wa_response.status_code}}"
              response_body: "{{wa_response.body}}"
        - db_insert:
            table: public.credit_logs
            values:
              brand: "{{brand}}"
              idempotency_key: "{{guards.idempotency_key}}"
              request_id: "{{request_id}}"
              amount_rm: "{{template_row.unit_price_rm}}"
              source: "whatsapp_template"
              metadata:
                template: "{{wa_payload.template.name}}"
                locale: "{{resolved_locale}}"
        - log_trigger: { status: "sent", idempotency_key: "{{guards.idempotency_key}}" }
      else:
        - db_insert:
            table: public.wa_template_log
            values:
              brand: "{{brand}}"
              idempotency_key: "{{guards.idempotency_key}}"
              status: "reversed"
              request_id: "{{request_id}}"
              template_name: "{{wa_payload.template.name}}"
              locale: "{{resolved_locale}}"
              response_code: "{{wa_response.status_code}}"
              response_body: "{{wa_response.body}}"
              reversal_reason: "{{wa_response.body.error.code}}"
        - log_trigger: { status: "reversed", reason: "{{wa_response.body.error.message}}", idempotency_key: "{{guards.idempotency_key}}" }

on_skip:
  - log_trigger: { status: "skipped", reason: "idempotent_or_guard_failed", idempotency_key: "{{guards.idempotency_key}}" }

on_error:
  - log_trigger: { status: "error", error: "{{last_error}}", idempotency_key: "{{guards.idempotency_key}}" }
