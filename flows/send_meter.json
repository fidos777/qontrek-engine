{
  "name": "send_meter",
  "description": "Local test fixture aligned to pytest expectations",
  "nodes": [
    {
      "name": "Set Brand Context",
      "type": "sql",
      "parameters": {
        "query": "select set_config('app.brand','voltek', true);"
      }
    },
    {
      "name": "Prepare Send Payload",
      "type": "function",
      "parameters": {
        "functionCode": "function preparePayload(data){ const brand='voltek'; const requestId='req-000'; const templateName='send_meter'; const localeSeed='en_US'; const purpose='whatsapp'; const ops_flow = data?.ops_flow || 'flow_b_send_meter'; const ops_node = 'prepare_send'; // ops_flow: data.ops_flow || 'flow_b_send_meter'\\nconst idempotencySeed = [brand, requestId, templateName, localeSeed, purpose].join('|'); const idempotency_key = '{{$json.idempotency_key}}'; return { ...data, brand, requestId, templateName, localeSeed, purpose, ops_flow, ops_node, idempotencySeed, idempotency_key }; }"
      }
    },
    {
      "name": "Send WhatsApp",
      "type": "http",
      "parameters": {
        "method": "POST",
        "url": "https://api.whatsapp.test/send",
        "body": {
          "template": "meter_notice",
          "idempotency_key": "{{$json.idempotency_key}}"
        },
        "options": {
          "retry": {
            "maxAttempts": 3,
            "waitBetweenAttempts": 2000,
            "waitBetweenAttemptsMax": 8000,
            "waitPolicy": "exponential",
            "retryOnHttpResponseCodes": [
              "429",
              "500",
              "502",
              "503",
              "504"
            ]
          }
        }
      }
    },
    {
      "name": "Send Successful?",
      "type": "function",
      "parameters": {
        "functionCode": "function isSuccess(item){ const ok = item?.json?.status === 'sent'; return { ...item, json: { ...(item.json||{}), ok } }; }"
      }
    },
    {
      "name": "Policy Blocked?",
      "type": "function",
      "parameters": {
        "functionCode": "function isPolicyBlocked(item){ const blocked = Boolean(item?.json?.policy_hold_reason); return { ...item, json: { ...(item.json||{}), blocked } }; }"
      }
    },
    {
      "name": "Log Template Sent",
      "type": "sql",
      "parameters": {
        "query": "insert into whatsapp_logs(idempotency_key, status, event) values ('{{$json.idempotency_key}}', 'sent', 'sent');"
      }
    },
    {
      "name": "Log Template Reversed",
      "type": "sql",
      "parameters": {
        "query": "with _ as (select set_config('app.brand','voltek', true)) insert into whatsapp_logs(brand, idempotency_key, status, event, reversal_reason) values ('voltek', '{{$json.idempotency_key}}', 'reversed', 'reversed', 'auto_reversal') ON CONFLICT (brand, idempotency_key) DO UPDATE SET status='reversed', reversal_reason='auto_reversal';"
      }
    },
    {
      "name": "Log Template Held",
      "type": "sql",
      "parameters": {
        "query": "with _ as (select set_config('app.brand','voltek', true)) insert into whatsapp_logs(idempotency_key, status, policy_hold_reason, event) values ('{{$json.idempotency_key}}', 'held', 'template_locale_missing', 'held');"
      }
    },
    {
      "name": "Insert Credit Log",
      "type": "sql",
      "parameters": {
        "query": "insert into credit_log(idempotency_key, action) values ('{{$json.idempotency_key}}','meter_send');"
      }
    },
    {
      "name": "Mark Held",
      "type": "function",
      "parameters": {
        "functionCode": "function markHeld(item){ item.json=item.json||{}; item.json.policy_hold_reason=item.json.policy_hold_reason||'template_locale_missing'; // ops_node = 'policy_hold'\\nconst ops_node='policy_hold'; const ops_error_code='HOLD_001'; item.ops_node=ops_node; item.ops_error_code=ops_error_code; return item; }"
      }
    },
    {
      "name": "Ops Log (Held)",
      "type": "function",
      "parameters": {
        "functionCode": "function opsLogHeld(item){ const _='ops_log_held'; return item; }"
      }
    },
    {
      "name": "Ops Log (Reversed)",
      "type": "sql",
      "parameters": {
        "query": "{{$loadFile('sql/ops_log_insert.sql')}}"
      }
    }
  ],
  "connections": {
    "Send Successful?": {
      "main": [
        [
          {
            "node": "Log Template Sent"
          }
        ],
        [
          {
            "node": "Log Template Reversed"
          }
        ]
      ]
    },
    "Policy Blocked?": {
      "main": [
        [
          {
            "node": "Mark Held"
          }
        ],
        [
          {
            "node": "Log Template Held"
          }
        ]
      ]
    },
    "Log Template Sent": {
      "main": [
        [
          {
            "node": "Insert Credit Log"
          }
        ]
      ]
    },
    "Log Template Held": {
      "main": [
        [
          {
            "node": "Ops Log (Held)"
          }
        ]
      ]
    },
    "Log Template Reversed": {
      "main": [
        [
          {
            "node": "Ops Log (Reversed)"
          }
        ]
      ]
    }
  }
}