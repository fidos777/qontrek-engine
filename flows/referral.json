{
  "name": "Flow F - Referral",
  "nodes": [
    {
      "parameters": {
        "schema": "public",
        "table": "installations",
        "triggerCondition": "stage = 'install_complete' AND (processed_referral IS NULL OR processed_referral = false)",
        "pollTime": 60
      },
      "id": "1",
      "name": "Install Complete Trigger",
      "type": "n8n-nodes-base.postgresTrigger",
      "typeVersion": 1,
      "position": [
        160,
        320
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nfunction asString(value, fallback) {\n  if (value === undefined || value === null || value === '') {\n    return fallback;\n  }\n  return String(value);\n}\n\nreturn items.map((item) => {\n  const installation = item.json || {};\n  const referrerId = asString(installation.referrer_id ?? installation.referrer ?? installation.advocate_id ?? installation.sales_id ?? installation.partner_id, 'unknown');\n  const referredId = asString(installation.referred_id ?? installation.customer_id ?? installation.lead_id ?? installation.customer_phone ?? installation.id, installation.id);\n  const eventName = asString(installation.event_name ?? 'install_complete', 'install_complete');\n  const requestId = asString(installation.request_id ?? installation.id ?? `${installation.brand || 'ref'}-${referredId}`, `${installation.brand || 'ref'}-${referredId}`);\n  const locale = installation.locale || installation.brand_default_locale || 'ms_MY';\n  const referralCode = installation.referral_code || crypto.createHash('md5').update(`${installation.brand}|${referredId}`).digest('hex').slice(0, 8).toUpperCase();\n\n  const components = installation.components || [\n    { type: 'body', parameters: [{ type: 'text', text: referralCode }] }\n  ];\n\n  return {\n    json: {\n      ...installation,\n      referrer_id: referrerId,\n      referred_id: referredId,\n      event_name: eventName,\n      request_id: requestId,\n      locale,\n      referral_code: referralCode,\n      components,\n    },\n  };\n});"
      },
      "id": "2",
      "name": "Build Referral Context",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        420,
        320
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH brand_ctx AS (\n    SELECT set_config('app.brand', '{{$json.brand}}', true)\n), cap_config AS (\n    SELECT COALESCE((\n      SELECT reward_cap_month\n      FROM public.brand_config\n      WHERE brand = '{{$json.brand}}'\n    ), 5) AS reward_cap\n), ref_stats AS (\n    SELECT COALESCE(COUNT(*), 0) AS month_total\n    FROM public.referrals\n    WHERE brand = '{{$json.brand}}'\n      AND referrer_id = '{{$json.referrer_id}}'\n      AND date_trunc('month', COALESCE(reward_last_update, created_at)) = date_trunc('month', now())\n      AND COALESCE(reward_status, 'pending') != 'held_reward_cap'\n)\nSELECT reward_cap, month_total, (month_total < reward_cap) AS eligible\nFROM cap_config, ref_stats;"
      },
      "id": "3",
      "name": "Check Reward Cap",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        420,
        520
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "4",
      "name": "Merge Reward Context",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        660,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\n\nreturn items.map((item) => {\n  const data = item.json || {};\n  const brand = data.brand || 'Voltek';\n  const locale = data.locale || 'ms_MY';\n  const purpose = 'referral_reward';\n  const template = data.template || { name: 'referral_reward_notify', language: locale };\n  const components = data.components || [{ type: 'body', parameters: [{ type: 'text', text: data.referral_code }] }];\n  const idSeed = [brand, data.referrer_id, data.referred_id, data.event_name].join('|');\n  const idempotencyKey = crypto.createHash('sha1').update(idSeed).digest('hex');\n\n  const sendPayload = {\n    brand,\n    locale,\n    customer_phone: data.customer_phone,\n    request_id: data.request_id,\n    purpose,\n    template,\n    components,\n    idempotency_key: idempotencyKey,\n  };\n\n  const eligible = Boolean(data.eligible);\n  const holdReason = eligible ? '' : 'reward_cap';\n\n  return {\n    json: {\n      ...data,\n      brand,\n      locale,\n      purpose,\n      eligible,\n      hold_reason: holdReason,\n      idempotency_key: idempotencyKey,\n      send_payload: sendPayload,\n    },\n  };\n});"
      },
      "id": "5",
      "name": "Evaluate Reward Eligibility",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        420
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$json.eligible}}"
            }
          ]
        }
      },
      "id": "6",
      "name": "Eligible?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        420
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH brand_ctx AS (\n    SELECT set_config('app.brand', '{{$json.brand}}', true)\n), upsert AS (\n    INSERT INTO public.referrals (brand, referrer_id, referred_id, event_name, installation_id, idempotency_key, referral_code, reward_status)\n    VALUES ('{{$json.brand}}', '{{$json.referrer_id}}', '{{$json.referred_id}}', '{{$json.event_name}}', {{$json.id}}, '{{$json.idempotency_key}}', '{{$json.referral_code}}', 'queued')\n    ON CONFLICT (brand, referrer_id, referred_id, event_name) DO NOTHING\n    RETURNING id\n), marker AS (\n    UPDATE public.installations\n    SET processed_referral = true, processed_referral_at = now()\n    WHERE id = {{$json.id}}\n    RETURNING 1\n)\nSELECT EXISTS(SELECT 1 FROM upsert) AS inserted;"
      },
      "id": "7",
      "name": "Insert Referral",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1380,
        260
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$json.inserted}}"
            }
          ]
        }
      },
      "id": "8",
      "name": "Inserted?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1620,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.map((item) => ({ json: item.json.send_payload }));"
      },
      "id": "9",
      "name": "Prepare Send Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1860,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": "Flow B - Send + Meter",
        "options": {
          "waitForReturnData": false
        }
      },
      "id": "10",
      "name": "Send Reward",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        2100,
        160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH brand_ctx AS (\n    SELECT set_config('app.brand', '{{$json.brand}}', true)\n), marker AS (\n    UPDATE public.installations\n    SET processed_referral = true, processed_referral_at = now()\n    WHERE id = {{$json.id}}\n    RETURNING 1\n)\nINSERT INTO public.wa_template_log (brand, idempotency_key, request_id, status, payload, reversal_reason)\nVALUES ('{{$json.brand}}', '{{$json.idempotency_key}}', '{{$json.request_id}}', 'held', '{{JSON.stringify($json.send_payload)}}'::jsonb, 'reward_cap')\nON CONFLICT (brand, idempotency_key) DO UPDATE\nSET status = EXCLUDED.status, reversal_reason = EXCLUDED.reversal_reason, payload = EXCLUDED.payload;"
      },
      "id": "11",
      "name": "Log Reward Cap Hold",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1380,
        600
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    }
  ],
  "connections": {
    "Install Complete Trigger": {
      "main": [
        [
          {
            "node": "Build Referral Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Referral Context": {
      "main": [
        [
          {
            "node": "Merge Reward Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Reward Cap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Reward Cap": {
      "main": [
        [
          {
            "node": "Merge Reward Context",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Reward Context": {
      "main": [
        [
          {
            "node": "Evaluate Reward Eligibility",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Reward Eligibility": {
      "main": [
        [
          {
            "node": "Eligible?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Eligible?": {
      "main": [
        [
          {
            "node": "Insert Referral",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Reward Cap Hold",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Referral": {
      "main": [
        [
          {
            "node": "Inserted?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inserted?": {
      "main": [
        [
          {
            "node": "Prepare Send Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Send Payload": {
      "main": [
        [
          {
            "node": "Send Reward",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}
