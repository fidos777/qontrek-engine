{
  "name": "Flow C - ROI Nudge",
  "nodes": [
    {
      "parameters": {
        "path": "wa/roi-nudge",
        "httpMethod": "POST"
      },
      "id": "1",
      "name": "ROI Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        160,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  EXISTS (SELECT 1 FROM public.opt_outs WHERE brand = '{{$json.brand}}' AND customer_phone = '{{$json.customer_phone}}') AS is_opted_out,\n  (SELECT COALESCE(MAX(next_eligible_at) > now(), false) FROM public.nudge_cooldowns WHERE brand = '{{$json.brand}}' AND conv_id = '{{$json.conv_id}}') AS cooldown_active,\n  COALESCE((SELECT reason FROM public.opt_outs WHERE brand = '{{$json.brand}}' AND customer_phone = '{{$json.customer_phone}}' LIMIT 1), '') AS opt_out_reason;"
      },
      "id": "2",
      "name": "Check Opt-Outs + Cooldown",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        420,
        220
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "3",
      "name": "Merge Context",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        660,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.map(item => {\n  const eligible = !item.json.is_opted_out && !item.json.cooldown_active;\n  const holdReason = item.json.is_opted_out\n    ? `Opt-out: ${item.json.opt_out_reason}`\n    : (item.json.cooldown_active ? 'Cooling down' : '');\n  const requestId = item.json.request_id || item.json.conv_id;\n  const idempotency = item.json.idempotency_key || requestId;\n  item.json = { ...item.json, eligible, hold_reason: holdReason, request_id: requestId, idempotency_key: idempotency };\n  const payload = {\n    brand: item.json.brand,\n    locale: item.json.locale || undefined,\n    request_id: requestId,\n    idempotency_key: idempotency,\n    template: item.json.template || { name: 'roi_follow_up', language: item.json.locale || 'ms_MY' },\n    customer_phone: item.json.customer_phone,\n    components: item.json.components || []\n  };\n  item.json.send_payload = payload;\n  return item;\n});"
      },
      "id": "4",
      "name": "Evaluate Eligibility",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$json.eligible}}"
            }
          ]
        }
      },
      "id": "5",
      "name": "Eligible?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.map(item => ({ json: item.json.send_payload }));"
      },
      "id": "6",
      "name": "Prepare Send Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1380,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": "Flow B - Send + Meter",
        "options": {
          "waitForReturnData": false
        }
      },
      "id": "7",
      "name": "Call Send + Meter",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1620,
        160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO public.wa_template_log (brand, idempotency_key, request_id, status, payload, reversal_reason)\nVALUES ('{{$json.brand}}', '{{$json.idempotency_key}}', '{{$json.request_id}}', 'held', '{{JSON.stringify($json)}}'::jsonb, '{{$json.hold_reason}}')\nON CONFLICT (brand, idempotency_key) DO UPDATE SET status = EXCLUDED.status, reversal_reason = EXCLUDED.reversal_reason;"
      },
      "id": "8",
      "name": "Log Held",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1380,
        460
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    }
  ],
  "connections": {
    "ROI Webhook": {
      "main": [
        [
          {
            "node": "Check Opt-Outs + Cooldown",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Opt-Outs + Cooldown": {
      "main": [
        [
          {
            "node": "Merge Context",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Context": {
      "main": [
        [
          {
            "node": "Evaluate Eligibility",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Eligibility": {
      "main": [
        [
          {
            "node": "Eligible?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Eligible?": {
      "main": [
        [
          {
            "node": "Prepare Send Payload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Held",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Send Payload": {
      "main": [
        [
          {
            "node": "Call Send + Meter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}
