{
  "name": "Flow C - ROI Nudge",
  "nodes": [
    {
      "parameters": {
        "path": "wa/roi-nudge",
        "httpMethod": "POST"
      },
      "id": "1",
      "name": "ROI Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        160,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH brand_ctx AS (\n    SELECT set_config('app.brand', '{{$json.brand}}', true)\n), last_sent AS (\n    SELECT MAX(created_at) AS last_sent_at\n    FROM public.wa_template_log\n    WHERE brand = '{{$json.brand}}'\n      AND request_id = '{{$json.conv_id}}'\n      AND status = 'sent'\n), opt_out_row AS (\n    SELECT\n      EXISTS (\n        SELECT 1\n        FROM public.opt_outs\n        WHERE brand = '{{$json.brand}}'\n          AND customer_phone = '{{$json.customer_phone}}'\n      ) AS is_opted_out,\n      COALESCE((\n        SELECT reason\n        FROM public.opt_outs\n        WHERE brand = '{{$json.brand}}'\n          AND customer_phone = '{{$json.customer_phone}}'\n        ORDER BY created_at DESC\n        LIMIT 1\n      ), '') AS opt_out_reason\n)\nSELECT\n  opt_out_row.is_opted_out,\n  opt_out_row.opt_out_reason,\n  last_sent.last_sent_at,\n  (last_sent.last_sent_at IS NOT NULL AND last_sent.last_sent_at > now() - interval '72 hours') AS cooldown_active\nFROM opt_out_row, last_sent;"
      },
      "id": "2",
      "name": "Check Opt-Outs + Cooldown",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        420,
        220
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    },
    {
      "parameters": {
        "mode": "combine"
      },
      "id": "3",
      "name": "Merge Context",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        660,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const crypto = require('crypto');\nconst KEYWORDS = ['STOP', 'BATAL', 'UNSUBSCRIBE', 'BERHENTI'];\n\nreturn items.map((item) => {\n  const data = item.json || {};\n  const inbound = (data.latest_message || data.last_message || data.last_inbound_message || data.last_message_text || '').toUpperCase();\n  const keywordOptOut = KEYWORDS.some((word) => inbound.includes(word));\n\n  const isOptedOut = Boolean(data.is_opted_out) || keywordOptOut;\n  const cooldownActive = Boolean(data.cooldown_active);\n  const holdReason = isOptedOut ? 'optout' : (cooldownActive ? 'cooldown' : '');\n\n  const brand = data.brand || 'Voltek';\n  const locale = data.locale || data.brand_default_locale || 'ms_MY';\n  const requestId = data.request_id || data.conv_id || `${brand}-${data.customer_phone || 'roi'}`;\n  const template = data.template || { name: 'roi_nudge_followup', language: locale };\n  const components = data.components || [];\n  const purpose = 'roi_nudge_v1';\n\n  const idSeed = [brand, requestId, template.name, locale, purpose].join('|');\n  const idempotencyKey = crypto.createHash('sha1').update(idSeed).digest('hex');\n\n  const sendPayload = {\n    brand,\n    locale,\n    customer_phone: data.customer_phone,\n    request_id: requestId,\n    purpose,\n    template,\n    components,\n    idempotency_key: idempotencyKey,\n  };\n\n  return {\n    json: {\n      ...data,\n      brand,\n      locale,\n      eligible: !isOptedOut && !cooldownActive,\n      hold_reason: holdReason,\n      keyword_opt_out: keywordOptOut,\n      purpose,\n      request_id: requestId,\n      idempotency_key: idempotencyKey,\n      send_payload: sendPayload,\n    },\n  };\n});"
      },
      "id": "4",
      "name": "Evaluate Eligibility",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$json.eligible}}"
            }
          ]
        }
      },
      "id": "5",
      "name": "Eligible?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1140,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "return items.map((item) => ({ json: item.json.send_payload }));"
      },
      "id": "6",
      "name": "Prepare Send Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1380,
        160
      ]
    },
    {
      "parameters": {
        "workflowId": "Flow B - Send + Meter",
        "options": {
          "waitForReturnData": false
        }
      },
      "id": "7",
      "name": "Call Send + Meter",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [
        1620,
        160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH brand_ctx AS (\n    SELECT set_config('app.brand', '{{$json.brand}}', true)\n)\nINSERT INTO public.wa_template_log (brand, idempotency_key, request_id, status, payload, reversal_reason)\nVALUES ('{{$json.brand}}', '{{$json.idempotency_key}}', '{{$json.request_id}}', 'held', '{{JSON.stringify($json.send_payload)}}'::jsonb, '{{$json.hold_reason}}')\nON CONFLICT (brand, idempotency_key) DO UPDATE\nSET status = EXCLUDED.status, reversal_reason = EXCLUDED.reversal_reason, payload = EXCLUDED.payload;"
      },
      "id": "8",
      "name": "Log Held",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1380,
        460
      ],
      "credentials": {
        "postgres": "Supabase"
      }
    }
  ],
  "connections": {
    "ROI Webhook": {
      "main": [
        [
          {
            "node": "Check Opt-Outs + Cooldown",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Opt-Outs + Cooldown": {
      "main": [
        [
          {
            "node": "Merge Context",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Context": {
      "main": [
        [
          {
            "node": "Evaluate Eligibility",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Eligibility": {
      "main": [
        [
          {
            "node": "Eligible?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Eligible?": {
      "main": [
        [
          {
            "node": "Prepare Send Payload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Held",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Send Payload": {
      "main": [
        [
          {
            "node": "Call Send + Meter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {}
}
