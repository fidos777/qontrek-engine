name: Tower Ledger Automation

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch: # Allow manual trigger

jobs:
  tower-upload:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: cockpit-ui

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for accurate commit info

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cockpit-ui/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage --run
        continue-on-error: true # Don't fail if tests fail, still generate seal

      - name: Type-check
        run: npm run type-check
        continue-on-error: true

      - name: Generate factory runtime seal
        env:
          TOWER_SHARED_KEY: ${{ secrets.TOWER_SHARED_KEY }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: node scripts/sealFactory.js

      - name: Upload to Tower
        env:
          TOWER_API_URL: ${{ secrets.TOWER_API_URL }}
          ATLAS_KEY: ${{ secrets.ATLAS_KEY }}
        run: node scripts/towerUpload.js ../proof/factory_runtime_seal.json
        continue-on-error: true # Don't fail if Tower is unavailable

      - name: Upload proof artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: proof-artifacts-${{ github.run_number }}
          path: |
            proof/factory_runtime_seal.json
            proof/tower_ci_upload_v1.json
          retention-days: 90

      - name: Commit proof artifacts
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          cd ..
          git add proof/factory_runtime_seal.json proof/tower_ci_upload_v1.json

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(ci): Update factory runtime seal [skip ci]" \
              -m "Generated by Tower Ledger workflow" \
              -m "Run ID: ${{ github.run_id }}" \
              -m "Commit: ${{ github.sha }}"

            # Push with retry (up to 3 attempts)
            for i in 1 2 3; do
              if git push; then
                echo "✅ Pushed proof artifacts successfully"
                break
              else
                if [ $i -lt 3 ]; then
                  echo "⚠️  Push failed, retrying in 2s..."
                  sleep 2
                else
                  echo "❌ Push failed after 3 attempts"
                  exit 1
                fi
              fi
            done
          fi

      - name: Verify Merkle root integrity
        if: success()
        run: |
          echo "Verifying Merkle root integrity..."

          MANIFEST_ROOT=$(jq -r '.merkle_root' ../proof/factory_runtime_seal.json)
          echo "Manifest root: $MANIFEST_ROOT"

          if [ -f ../proof/tower_ci_upload_v1.json ]; then
            ECHO_ROOT=$(jq -r '.echo_root' ../proof/tower_ci_upload_v1.json)
            echo "Tower echo root: $ECHO_ROOT"

            if [ "$MANIFEST_ROOT" = "$ECHO_ROOT" ]; then
              echo "✅ Merkle roots match"
            else
              echo "❌ Merkle root mismatch!"
              exit 1
            fi
          else
            echo "⚠️  Tower upload receipt not found (Tower may be unavailable)"
          fi

      - name: Check coverage threshold
        if: success()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE_PCT=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            echo "Coverage: $COVERAGE_PCT%"

            if (( $(echo "$COVERAGE_PCT >= 90" | bc -l) )); then
              echo "✅ Coverage meets 90% threshold"
            else
              echo "⚠️  Coverage below 90% threshold ($COVERAGE_PCT%)"
              # Don't fail, just warn
            fi
          else
            echo "⚠️  Coverage summary not found"
          fi

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Tower Ledger Automation Failed',
              body: `Tower ledger automation failed on ${new Date().toISOString()}\n\n` +
                    `**Run**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n` +
                    `**Commit**: ${context.sha}\n\n` +
                    `**Branch**: ${context.ref}\n\n` +
                    `Please check logs and investigate.`,
              labels: ['ci', 'tower', 'priority-high']
            })

      - name: Summary
        if: always()
        run: |
          echo "## Tower Ledger Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f ../proof/factory_runtime_seal.json ]; then
            MANIFEST_ID=$(jq -r '.manifest_id' ../proof/factory_runtime_seal.json)
            FILE_COUNT=$(jq -r '.file_count' ../proof/factory_runtime_seal.json)
            MERKLE_ROOT=$(jq -r '.merkle_root' ../proof/factory_runtime_seal.json)
            AVG_COVERAGE=$(jq -r '.coverage.average_pct' ../proof/factory_runtime_seal.json)

            echo "✅ **Factory Runtime Seal Generated**" >> $GITHUB_STEP_SUMMARY
            echo "- Manifest ID: \`$MANIFEST_ID\`" >> $GITHUB_STEP_SUMMARY
            echo "- Files: $FILE_COUNT proofs" >> $GITHUB_STEP_SUMMARY
            echo "- Merkle Root: \`${MERKLE_ROOT:0:32}...\`" >> $GITHUB_STEP_SUMMARY
            echo "- Coverage: $AVG_COVERAGE%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Factory Runtime Seal Not Generated**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f ../proof/tower_ci_upload_v1.json ]; then
            RECEIPT_ID=$(jq -r '.receipt_id' ../proof/tower_ci_upload_v1.json)
            UPLOAD_STATUS=$(jq -r '.upload_status' ../proof/tower_ci_upload_v1.json)
            ACK_STATUS=$(jq -r '.ack_status' ../proof/tower_ci_upload_v1.json)

            echo "✅ **Tower Upload Successful**" >> $GITHUB_STEP_SUMMARY
            echo "- Receipt ID: \`$RECEIPT_ID\`" >> $GITHUB_STEP_SUMMARY
            echo "- Status: $UPLOAD_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "- ACK: $ACK_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Tower Upload Skipped** (Tower may be unavailable)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
